package com.company.experiments.service;

import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Service for exporting reports to PDF and Excel formats
 * Note: This is a simplified implementation using HTML/CSV export
 * For production, consider using libraries like Apache POI for Excel and iText/Flying Saucer for PDF
 */
@Service("ExportService")
public class ExportService {

    /**
     * Export report data to PDF format (HTML-based simple implementation)
     * For production, integrate a proper PDF library like iText or Flying Saucer
     */
    public byte[] exportToPdf(Map<String, Object> reportData, String reportType) {
        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>");
        html.append("<html>");
        html.append("<head>");
        html.append("<meta charset='UTF-8'>");
        html.append("<title>").append(reportData.get("reportTitle")).append("</title>");
        html.append("<style>");
        html.append("body { font-family: Arial, sans-serif; margin: 40px; }");
        html.append("h1 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; }");
        html.append("h2 { color: #555; margin-top: 30px; }");
        html.append(".report-header { background: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 20px; }");
        html.append(".kpi-box { display: inline-block; width: 200px; padding: 15px; margin: 10px; background: #e3f2fd; border-radius: 5px; }");
        html.append(".kpi-label { font-size: 12px; color: #666; }");
        html.append(".kpi-value { font-size: 24px; font-weight: bold; color: #333; }");
        html.append("table { border-collapse: collapse; width: 100%; margin-top: 20px; }");
        html.append("th { background: #667eea; color: white; padding: 12px; text-align: left; }");
        html.append("td { padding: 10px; border-bottom: 1px solid #ddd; }");
        html.append("tr:hover { background: #f5f5f5; }");
        html.append(".footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }");
        html.append("</style>");
        html.append("</head>");
        html.append("<body>");

        // Header
        html.append("<div class='report-header'>");
        html.append("<h1>").append(reportData.get("reportTitle")).append("</h1>");
        html.append("<p><strong>Period:</strong> ").append(reportData.get("period")).append("</p>");
        html.append("<p><strong>Generated:</strong> ").append(reportData.get("generatedDate")).append("</p>");
        html.append("</div>");

        // Report-specific content
        switch (reportType) {
            case "MONTHLY_MAINTENANCE":
                appendMonthlyMaintenanceContent(html, reportData);
                break;
            case "BUDGET_UTILIZATION":
                appendBudgetUtilizationContent(html, reportData);
                break;
            case "INFRASTRUCTURE_HEALTH":
                appendInfrastructureHealthContent(html, reportData);
                break;
            case "TEAM_PERFORMANCE":
                appendTeamPerformanceContent(html, reportData);
                break;
        }

        // Footer
        html.append("<div class='footer'>");
        html.append("<p>Generated by Experiments Planning System - Â© 2024</p>");
        html.append("</div>");

        html.append("</body>");
        html.append("</html>");

        return html.toString().getBytes();
    }

    /**
     * Export report data to Excel format (CSV-based simple implementation)
     * For production, integrate Apache POI for proper Excel XLSX format
     */
    public byte[] exportToExcel(Map<String, Object> reportData, String reportType) {
        StringBuilder csv = new StringBuilder();

        // Header
        csv.append("\"").append(reportData.get("reportTitle")).append("\"\n");
        csv.append("\"Period:\",\"").append(reportData.get("period")).append("\"\n");
        csv.append("\"Generated:\",\"").append(reportData.get("generatedDate")).append("\"\n");
        csv.append("\n");

        // Report-specific content
        switch (reportType) {
            case "MONTHLY_MAINTENANCE":
                appendMonthlyMaintenanceCsv(csv, reportData);
                break;
            case "BUDGET_UTILIZATION":
                appendBudgetUtilizationCsv(csv, reportData);
                break;
            case "INFRASTRUCTURE_HEALTH":
                appendInfrastructureHealthCsv(csv, reportData);
                break;
            case "TEAM_PERFORMANCE":
                appendTeamPerformanceCsv(csv, reportData);
                break;
        }

        return csv.toString().getBytes();
    }

    private void appendMonthlyMaintenanceContent(StringBuilder html, Map<String, Object> data) {
        html.append("<h2>Summary</h2>");
        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Total Plans</div>");
        html.append("<div class='kpi-value'>").append(data.get("totalPlans")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Completed</div>");
        html.append("<div class='kpi-value'>").append(data.get("completedPlans")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>In Progress</div>");
        html.append("<div class='kpi-value'>").append(data.get("inProgressPlans")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Completion Rate</div>");
        html.append("<div class='kpi-value'>").append(String.format("%.1f%%", data.get("completionRate"))).append("</div>");
        html.append("</div>");

        html.append("<h2>Budget</h2>");
        html.append("<p><strong>Total Budget Allocated:</strong> $").append(formatMoney((BigDecimal) data.get("totalBudget"))).append("</p>");
    }

    private void appendBudgetUtilizationContent(StringBuilder html, Map<String, Object> data) {
        html.append("<h2>Budget Overview</h2>");
        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Total Budget</div>");
        html.append("<div class='kpi-value'>$").append(formatMoney((BigDecimal) data.get("totalBudget"))).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Allocated</div>");
        html.append("<div class='kpi-value'>$").append(formatMoney((BigDecimal) data.get("totalAllocated"))).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Spent</div>");
        html.append("<div class='kpi-value'>$").append(formatMoney((BigDecimal) data.get("totalSpent"))).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Utilization Rate</div>");
        html.append("<div class='kpi-value'>").append(String.format("%.1f%%", data.get("utilizationRate"))).append("</div>");
        html.append("</div>");
    }

    private void appendInfrastructureHealthContent(StringBuilder html, Map<String, Object> data) {
        html.append("<h2>Risk Distribution</h2>");
        html.append("<div class='kpi-box' style='background: #ffebee;'>");
        html.append("<div class='kpi-label'>Critical Risk</div>");
        html.append("<div class='kpi-value' style='color: #c62828;'>").append(data.get("criticalRisk")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box' style='background: #fff3e0;'>");
        html.append("<div class='kpi-label'>High Risk</div>");
        html.append("<div class='kpi-value' style='color: #ef6c00;'>").append(data.get("highRisk")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box' style='background: #fff9c4;'>");
        html.append("<div class='kpi-label'>Medium Risk</div>");
        html.append("<div class='kpi-value' style='color: #f57f17;'>").append(data.get("mediumRisk")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box' style='background: #e8f5e9;'>");
        html.append("<div class='kpi-label'>Low Risk</div>");
        html.append("<div class='kpi-value' style='color: #2e7d32;'>").append(data.get("lowRisk")).append("</div>");
        html.append("</div>");

        html.append("<h2>Top 10 Highest Risk Items</h2>");
        html.append("<table>");
        html.append("<tr><th>Name</th><th>Code</th><th>Risk Score</th><th>Criticality</th><th>Status</th></tr>");

        @SuppressWarnings("unchecked")
        List<Map<String, Object>> topRiskItems = (List<Map<String, Object>>) data.get("topRiskItems");
        for (Map<String, Object> item : topRiskItems) {
            html.append("<tr>");
            html.append("<td>").append(item.get("name")).append("</td>");
            html.append("<td>").append(item.get("code")).append("</td>");
            html.append("<td>").append(String.format("%.1f", item.get("riskScore"))).append("</td>");
            html.append("<td>").append(item.get("criticality")).append("</td>");
            html.append("<td>").append(item.get("status")).append("</td>");
            html.append("</tr>");
        }
        html.append("</table>");
    }

    private void appendTeamPerformanceContent(StringBuilder html, Map<String, Object> data) {
        html.append("<h2>Overall Statistics</h2>");
        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Total Teams</div>");
        html.append("<div class='kpi-value'>").append(data.get("totalTeams")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Total Employees</div>");
        html.append("<div class='kpi-value'>").append(data.get("totalEmployees")).append("</div>");
        html.append("</div>");

        html.append("<div class='kpi-box'>");
        html.append("<div class='kpi-label'>Avg Completion Rate</div>");
        html.append("<div class='kpi-value'>").append(String.format("%.1f%%", data.get("avgCompletionRate"))).append("</div>");
        html.append("</div>");

        html.append("<h2>Team Performance Details</h2>");
        html.append("<table>");
        html.append("<tr><th>Team</th><th>Size</th><th>Plans</th><th>Completed</th><th>Rate</th><th>Budget</th></tr>");

        @SuppressWarnings("unchecked")
        List<Map<String, Object>> teamPerformance = (List<Map<String, Object>>) data.get("teamPerformance");
        for (Map<String, Object> team : teamPerformance) {
            html.append("<tr>");
            html.append("<td>").append(team.get("teamName")).append("</td>");
            html.append("<td>").append(team.get("teamSize")).append("</td>");
            html.append("<td>").append(team.get("totalPlans")).append("</td>");
            html.append("<td>").append(team.get("completedPlans")).append("</td>");
            html.append("<td>").append(String.format("%.1f%%", team.get("completionRate"))).append("</td>");
            html.append("<td>$").append(formatMoney((BigDecimal) team.get("totalBudget"))).append("</td>");
            html.append("</tr>");
        }
        html.append("</table>");
    }

    private void appendMonthlyMaintenanceCsv(StringBuilder csv, Map<String, Object> data) {
        csv.append("\"Summary\"\n");
        csv.append("\"Total Plans\",").append(data.get("totalPlans")).append("\n");
        csv.append("\"Completed\",").append(data.get("completedPlans")).append("\n");
        csv.append("\"In Progress\",").append(data.get("inProgressPlans")).append("\n");
        csv.append("\"Planned\",").append(data.get("plannedPlans")).append("\n");
        csv.append("\"Completion Rate\",").append(String.format("%.2f%%", data.get("completionRate"))).append("\n");
        csv.append("\"Total Budget\",").append(data.get("totalBudget")).append("\n");
    }

    private void appendBudgetUtilizationCsv(StringBuilder csv, Map<String, Object> data) {
        csv.append("\"Budget Overview\"\n");
        csv.append("\"Total Budget\",").append(data.get("totalBudget")).append("\n");
        csv.append("\"Allocated\",").append(data.get("totalAllocated")).append("\n");
        csv.append("\"Spent\",").append(data.get("totalSpent")).append("\n");
        csv.append("\"Remaining\",").append(data.get("remaining")).append("\n");
        csv.append("\"Utilization Rate\",").append(String.format("%.2f%%", data.get("utilizationRate"))).append("\n");
    }

    private void appendInfrastructureHealthCsv(StringBuilder csv, Map<String, Object> data) {
        csv.append("\"Risk Distribution\"\n");
        csv.append("\"Total Infrastructure\",").append(data.get("totalInfrastructure")).append("\n");
        csv.append("\"Critical Risk\",").append(data.get("criticalRisk")).append("\n");
        csv.append("\"High Risk\",").append(data.get("highRisk")).append("\n");
        csv.append("\"Medium Risk\",").append(data.get("mediumRisk")).append("\n");
        csv.append("\"Low Risk\",").append(data.get("lowRisk")).append("\n");
        csv.append("\n");
        csv.append("\"Top Risk Items\"\n");
        csv.append("\"Name\",\"Code\",\"Risk Score\",\"Criticality\",\"Status\"\n");

        @SuppressWarnings("unchecked")
        List<Map<String, Object>> topRiskItems = (List<Map<String, Object>>) data.get("topRiskItems");
        for (Map<String, Object> item : topRiskItems) {
            csv.append("\"").append(item.get("name")).append("\",");
            csv.append("\"").append(item.get("code")).append("\",");
            csv.append(String.format("%.1f", item.get("riskScore"))).append(",");
            csv.append(item.get("criticality")).append(",");
            csv.append("\"").append(item.get("status")).append("\"\n");
        }
    }

    private void appendTeamPerformanceCsv(StringBuilder csv, Map<String, Object> data) {
        csv.append("\"Team Performance\"\n");
        csv.append("\"Team\",\"Size\",\"Total Plans\",\"Completed\",\"Completion Rate\",\"Budget\"\n");

        @SuppressWarnings("unchecked")
        List<Map<String, Object>> teamPerformance = (List<Map<String, Object>>) data.get("teamPerformance");
        for (Map<String, Object> team : teamPerformance) {
            csv.append("\"").append(team.get("teamName")).append("\",");
            csv.append(team.get("teamSize")).append(",");
            csv.append(team.get("totalPlans")).append(",");
            csv.append(team.get("completedPlans")).append(",");
            csv.append(String.format("%.2f%%", team.get("completionRate"))).append(",");
            csv.append(team.get("totalBudget")).append("\n");
        }
    }

    private String formatMoney(BigDecimal amount) {
        if (amount == null) return "0.00";
        return String.format("%,.2f", amount);
    }
}
